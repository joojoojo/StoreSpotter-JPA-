name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: make application-prod.yml
        run: |
          cd ./src/main/resources
          touch ./application-prod.yml
          echo "${{ secrets.APPLICATION_PROD }}" > ./application-prod.yml
        shell: bash

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Docker build
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t app .
          docker tag app ${{ secrets.DOCKER_USERNAME }}/sojoo:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/sojoo:latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ubuntu  # EC2 user
          key: ${{ secrets.AWS_EC2_PRIVATEKEY }} # pem 키
          # 도커 작업
          script: |
            cd compose/
            
            echo "SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }}" > .env
            echo "SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}" >> .env
            echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}" >> .env
            echo "SPRING_DATASOURCE_DRIVER_CLASS_NAME=${{ secrets.SPRING_DATASOURCE_DRIVER }}" >> .env
            echo "SPRING_MAIL_HOST=smtp.naver.com" >> .env
            echo "SPRING_MAIL_PORT=465" >> .env
            echo "SPRING_MAIL_USERNAME=${{ secrets.SMTP_USERNAME }}" >> .env
            echo "SPRING_MAIL_PASSWORD=${{ secrets.SMTP_PASSWORD }}" >> .env
            echo "SPRING_MAIL_PROTOCAL=smtp" >> .env
            echo "SPRING_REDIS_HOST=redis" >> .env
            echo "SPRING_REDIS_PORT=6379" >> .env
            echo "SPRING_REDIS_PASSWORD=123" >> .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET_KEY }}" >> .env
            echo "JWT_ACCESS_TOKEN_EXPIRDATION=1800000" >> .env
            echo "JWT_REFRESH_TOKEN_EXPIEDATION=2592000000" >> .env
            echo "API_API_SERVICE_KEY=${{ secrets.API_SERVICE_KEY }}" >> .env
            
            touch docker-compose.yml
            echo "${{ secrets.DOCKER_COMPOSE }}" > docker-compose.yml
            docker pull ${{ secrets.DOCKER_USERNAME }}/sojoo:latest
            
            touch conf/nginx.conf
            echo "${{ secrets.NGINX_CONF }}" > conf/nginx.conf

            CONTAINERS=$(docker ps -q)
            if [ -n "$CONTAINERS" ]; then
            docker stop $CONTAINERS
            fi
            
            docker ps -q -f 'status=exited' | xargs -r docker rm
            
            docker rmi $(docker images -q)
  
            docker-compose -f docker-compose.yml pull
            docker-compose -f docker-compose.yml up -d
                        
            docker image prune -a -f            

      - name: Deploy to EC2-server2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST2 }}
          username: ubuntu  # EC2 user
          key: ${{ secrets.AWS_EC2_PRIVATEKEY }} # pem 키
          # 도커 작업
          script: |
            cd compose/
            
            echo "SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }}" > .env
            echo "SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}" >> .env
            echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}" >> .env
            echo "SPRING_DATASOURCE_DRIVER_CLASS_NAME=${{ secrets.SPRING_DATASOURCE_DRIVER }}" >> .env
            echo "SPRING_MAIL_HOST=smtp.naver.com" >> .env
            echo "SPRING_MAIL_PORT=465" >> .env
            echo "SPRING_MAIL_USERNAME=${{ secrets.SMTP_USERNAME }}" >> .env
            echo "SPRING_MAIL_PASSWORD=${{ secrets.SMTP_PASSWORD }}" >> .env
            echo "SPRING_MAIL_PROTOCAL=smtp" >> .env
            echo "SPRING_REDIS_HOST=redis" >> .env
            echo "SPRING_REDIS_PORT=6379" >> .env
            echo "SPRING_REDIS_PASSWORD=123" >> .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET_KEY }}" >> .env
            echo "JWT_ACCESS_TOKEN_EXPIRDATION=1800000" >> .env
            echo "JWT_REFRESH_TOKEN_EXPIEDATION=2592000000" >> .env
            echo "API_API_SERVICE_KEY=${{ secrets.API_SERVICE_KEY }}" >> .env
            
            touch docker-compose.yml
            echo "${{ secrets.DOCKER_COMPOSE }}" > docker-compose.yml
            docker pull ${{ secrets.DOCKER_USERNAME }}/sojoo:latest
            
            touch conf/nginx.conf
            echo "${{ secrets.NGINX_CONF }}" > conf/nginx.conf

            CONTAINERS=$(docker ps -q)
            if [ -n "$CONTAINERS" ]; then
            docker stop $CONTAINERS
            fi
            
            docker ps -q -f 'status=exited' | xargs -r docker rm
            
            docker rmi $(docker images -q)
            
            docker-compose -f docker-compose.yml pull
            docker-compose -f docker-compose.yml up -d
            
            docker image prune -a -f